import{_ as e,r as t,o,c,a as n,b as p,d as l,e as s}from"./app.2a81dd92.js";const i="/coding-site/assets/promises.1b20a4a8.png",u={},r=s('<h1 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h1><ul><li>콜백 지옥(<code>callback hell</code>) 문제를 해결하기 위해 등장한 비동기 처리를 위한 객체</li><li><strong>비동기 작업</strong>의 결과에 해당하는 성공 또는 실패를 나타낸다.</li><li><code>Promise</code>를 사용하면 비동기 메소드에서 마치 동기 메서드 처럼 값을 반환한다. <ul><li>미래에 결과를 제공하겠다는 약속을 반환하는 것이다.</li></ul></li></ul>',2),d={class:"custom-container tip"},k=n("p",{class:"custom-container-title"},"Promise 상태",-1),m=n("ul",null,[n("li",null,"대기(pending): 이행하지도, 거부하지도 않은 초기 상태."),n("li",null,"이행(fulfilled): 연산이 성공적으로 완료됨."),n("li",null,"거부(rejected): 연산이 실패함.")],-1),v=n("img",{src:i,alt:"promise_state"},null,-1),h={href:"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise",target:"_blank",rel:"noopener noreferrer"},b=s(`<hr><h2 id="promise-생성하기" tabindex="-1"><a class="header-anchor" href="#promise-생성하기" aria-hidden="true">#</a> <code>Promise</code> 생성하기</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// executor</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>new Promise()</code> 에 전달되는 함수는 <code>Promise</code> 객체가 생성 될 때 자동으로 실행되며, 결과를 만들어내는 코드를 포함함다.</li><li><strong><code>resolve</code></strong> 와 <strong><code>reject</code></strong> 는 자바스크립트에서 제공하는 콜백함수로, 개발자는 <code>executor</code> 부분을 작성하면 된다.</li><li>인수로 넘겨진 콜백 함수 중 <strong>하나를 반드시 호출</strong>해야 한다. <ul><li><code>resolve(value)</code> : 성공적으로 진행된 경우에 결과 객체와 함께 호출</li><li><code>reject(error)</code> : 에러 발생시 에러 객체와 함께 호출</li></ul></li></ul><h2 id="then-catch-finally" tabindex="-1"><a class="header-anchor" href="#then-catch-finally" aria-hidden="true">#</a> then, catch, finally</h2><ul><li><strong><code>Promise</code></strong> 객체는 <strong>executor</strong> 와 결과나 에러를 받을 <strong>함수</strong>를 이어주는 역할을 한다.</li><li>결과나 에러를 처리하는 함수는 <code>.then</code>, <code>.catch</code>, <code>.finally</code> 를 사용해서 등록한다.</li></ul><h3 id="then" tabindex="-1"><a class="header-anchor" href="#then" aria-hidden="true">#</a> then</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 결과를 처리*/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 에러 처리 */</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token comment">// .then()의 첫 번재 인자는 프로미스가 이행되었을 때 실행되는 함수이고 실행 결과를 받는다.</span>
<span class="token comment">// 두 번째 인자는 프로미스가 거부되었을 때 실행되는 함수이고, 에러를 받는다.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>예시 코드</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;완료!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// setTimeout(() =&gt; reject(&quot;에러!&quot;), 1000);</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// resolve 함수는 .then의 첫 번째 함수(인수)를 실행합니다.</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 1초 후 &quot;완료!&quot;를 출력</span>
  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>   <span class="token comment">// 실행되지 않음</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="catch" tabindex="-1"><a class="header-anchor" href="#catch" aria-hidden="true">#</a> catch</h3><ul><li>에러가 발생한 경우를 구분하고 싶다면, <code>.then(null, errorHandlingFunction)</code> 같이 첫 번째 인자를 <strong>null</strong> 로 전달한다.</li><li>또는, <code>.catch(errorHandlingFunction)</code>를 사용한다.</li></ul><h3 id="finally" tabindex="-1"><a class="header-anchor" href="#finally" aria-hidden="true">#</a> finally</h3><ul><li>결과에 상관없이 항상 마무리 작업이 필요한 경우에 사용</li><li><code>finally</code> 처리 함수에는 전달되는 값이 없다.</li><li>프로미스의 성공이나 실패를 알 수 없다.</li></ul><h2 id="chaining" tabindex="-1"><a class="header-anchor" href="#chaining" aria-hidden="true">#</a> Chaining</h2><ul><li>프로미스의 체이닝이 가능한 것은 <code>.then()</code> 을 호출하면 <code>promise</code> 가 반환되기 때문이다.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (*)</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// (**)</span>

  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  <span class="token keyword">return</span> result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// (***)</span>

  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
  <span class="token keyword">return</span> result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
  <span class="token keyword">return</span> result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function f(g,_){const a=t("ExternalLinkIcon");return o(),c("div",null,[r,n("div",d,[k,m,n("p",null,[v,n("a",h,[p("MDN의 promise 참고"),l(a)])])]),b])}const j=e(u,[["render",f],["__file","promise.html.vue"]]);export{j as default};
