import{_ as o,r as t,o as l,c,a as s,b as n,d as a,e as p}from"./app.2a81dd92.js";const u={},d=s("h1",{id:"unittest",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#unittest","aria-hidden":"true"},"#"),n(" unittest")],-1),r={href:"https://docs.python.org/3/library/unittest.html",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"JUnit",-1),v={href:"https://junit.org/junit5/",target:"_blank",rel:"noopener noreferrer"},m=s("li",null,[s("code",null,"테스트 자동화"),n(", "),s("code",null,"테스트를 위한 사전 설정(setup)"),n("과 "),s("code",null,"종료(shutdown) 코드 공유"),n(", "),s("code",null,"테스트를 컬렉션에 종합하기"),n(", "),s("code",null,"테스트와 리포트 프레임워크의 분리"),n(" 등을 지원")],-1),h=p(`<blockquote><p>객체 지향적 방법을 지원하기 위한 주요 개념</p><ul><li><strong><code>test fixture</code></strong> : 1개 또는 그 이상의 테스트를 수행할 때 필요한 준비와 그와 관련한 동작들</li><li><strong><code>test case</code></strong> : <strong>테스트의 개별 단위</strong>. 특정한 입력 모음에 대한 특정한 결과를 확인 <ul><li><code>unittest</code>에서는 베이스 클래인 <code>TestCase</code>를 지원</li></ul></li><li><strong><code>test suite</code></strong> : <strong>테스트 묶음</strong>은 여러 테스트 케이스, 테스트 묶음, 또는 둘 다를 포함. 실행할 테스트 케이스를 종합하는데 사용</li><li><strong><code>test runner</code></strong> : <strong>테스트 실행자</strong>는 테스트 실행을 조율하고 테스트 결과를 사용자에게 제공하는 역할</li><li>그 외 <ul><li><code>doctest 모듈</code>: 다른 특징을 가지는 또 다른 테스트 지원 모듈</li><li><code>pytest</code> : 테스트를 작성하는 간편한 문법을 제공하는 <em>3rd-party 테스트 프레임워크</em></li><li><code>Tools/unittestgui/unittestgui.py</code> 스크립트는 테스트 탐색 및 실행을 위한 GUI 도구</li></ul></li></ul></blockquote><h2 id="간단한-예시" tabindex="-1"><a class="header-anchor" href="#간단한-예시" aria-hidden="true">#</a> 간단한 예시</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> unittest

<span class="token keyword">class</span> <span class="token class-name">TestStringMethods</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">test_upper</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;FOO&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test_isupper</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>assertTrue<span class="token punctuation">(</span><span class="token string">&#39;FOO&#39;</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>assertFalse<span class="token punctuation">(</span><span class="token string">&#39;Foo&#39;</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test_split</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment"># check that s.split fails when the separator is not a string</span>
        <span class="token keyword">with</span> self<span class="token punctuation">.</span>assertRaises<span class="token punctuation">(</span>TypeError<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 특정 예외가 발생했는지 검증</span>
            s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>테스트 케이스는 <code>unittest.TestCase</code> 를 상속받은 서브 클래스</li><li>클래스 이름은 <code>Test</code>로 시작, 3개의 테스트는 <code>test</code> 글자로 시작하는 이름을 가진 메소드</li><li><code>assert</code> 대신에 <code>assertEqual()</code>, <code>assertTrue()</code>, <code>assertRaises()</code> 를 사용하면 테스트 결과를 취합해서 리포트를 생성할 수 있음.</li><li><code>setUp()</code>과 <code>tearDown()</code> 메소드로 각각의 테스트 메소드의 실행전과 후에 필요한 작업을 할 수 있다.</li></ul><h2 id="명령행-인터페이스" tabindex="-1"><a class="header-anchor" href="#명령행-인터페이스" aria-hidden="true">#</a> 명령행 인터페이스</h2><ul><li>unittest 모듈은 명령행을 사용하여 모듈, 클래스, 심지어 각 테스트 메서드의 테스트들을 실행할 수 있다.</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> unittest test_module1 test_module2
python <span class="token parameter variable">-m</span> unittest test_module.TestClass
python <span class="token parameter variable">-m</span> unittest test_module.TestClass.test_method
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>모듈 이름이나 완전히 정규화된 클래스나 메서드 이름이 포함된 목록을 전달할 수 있으며, 테스트 모듈은 파일 경로로 지정할 수 있음.</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> unittest tests/test_something.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>-v</code> 옵션을 주면 좀 더 상세하게 출력</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> unittest <span class="token parameter variable">-v</span> test_module
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>아무 인자 없이 실행하면 테스트 탐색(Discovery)이 실행됩니다:</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> unittest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>모든 명령행 옵션 목록을 보기:</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> unittest <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="테스트-탐색" tabindex="-1"><a class="header-anchor" href="#테스트-탐색" aria-hidden="true">#</a> 테스트 탐색</h2><blockquote><p>버전 3.2 추가</p></blockquote><ul><li><p>모든 테스트 파일은 반드시 프로젝트의 가장 상위 디렉터리로부터 모듈 또는 패키지(이름 공간 패키지 포함)로 임포트 가능해야 함</p><ul><li>즉, 파일 이름은 반드시 유효한 식별자</li></ul></li><li><p><code>TestLoader.discover()</code> 로 구현되었으며, 명령행으로 사용가능</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> project_directory
$ python <span class="token parameter variable">-m</span> unittest discover
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">서브 명렁어</p><ul><li><code>-v</code>, <code>--verbose</code> : 상세 출력</li><li><code>-s</code>, <code>--start-directory &lt;directory&gt;</code> : 탐색을 시작할 디렉토리(디폴트는 .)</li><li><code>-p</code>, <code>--pattern &lt;pattern&gt;</code> : 테스트 파일을 검색할 패턴 (기본갑은 test*.py)</li><li><code>-t</code>, <code>--top-level-directory &lt;director&gt;</code> : 프로젝트 최상위 디렉토리</li></ul><p>-​ <code>-s</code>, <code>-p</code>, <code>-t</code> 옵션은 순서대로 위치 인자로서 사용 가능함.</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> unittest discover <span class="token parameter variable">-s</span> project_directory <span class="token parameter variable">-p</span> <span class="token string">&quot;*_test.py&quot;</span>
python <span class="token parameter variable">-m</span> unittest discover project_directory <span class="token string">&quot;*_test.py&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">주의</p><p>테스트 탐색은 테스트를 임포트해서 로드함. 테스트 파일을 임포트하기 위해 경로를 패키지 이름으로 변경함.</p></div><h2 id="테스트-코드-구조" tabindex="-1"><a class="header-anchor" href="#테스트-코드-구조" aria-hidden="true">#</a> 테스트 코드 구조</h2><ul><li><p>단위 테스트의 기본 구성 블록은 <em>테스트 케이스</em></p></li><li><p>unittest에서 테스트 케이스는 <code>unittest.TestCase</code> 의 인스턴스</p><ul><li><code>TestCase</code>의 서브 클래스 이거나, <code>FunctionTestCase</code>를 작성</li></ul></li><li><p>어떤 것을 테스트하기 위해서는 <code>TestCase</code> 베이스 클래스에서 제공하는 <code>assert*()</code> 메서드 중 한 개를 사용</p></li><li><p>테스트가 실패한다면 그 이유를 설명한 메시지가 포함된 예외가 발생</p></li><li><p>사전 설정 코드는 <code>setUp()</code>으로 분리</p></li><li><p>테스트 메소드 실행되고 정리를 위한 작업은 <code>tearDown()</code> 사용</p></li><li><p>개별 테스트 메서드를 실행하기 위해 고유한 테스트 픽스쳐에 해당하는 새로운 테스트 케이스 인스턴스가 생성</p></li><li><p><code>setUp()</code>, <code>tearDown()</code>, <code>__init__()</code>는 테스트 당 1번씩 실행</p></li></ul><h4 id="test-suite" tabindex="-1"><a class="header-anchor" href="#test-suite" aria-hidden="true">#</a> Test suite</h4><ul><li><p>테스트하려는 기능에 따라 테스트들을 같이 모아서 테스트 케이스 구현을 사용하는 것을 추천</p></li><li><p>이것을 위해 <code>unittest</code>는 <em>테스트 묶음(test suite)</em> 을 제공 &gt;&gt; <code>unittest.TestSuite</code>클래스</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> unittest
<span class="token keyword">def</span> <span class="token function">suite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    suite <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TestSuite<span class="token punctuation">(</span><span class="token punctuation">)</span>
    suite<span class="token punctuation">.</span>addTest<span class="token punctuation">(</span>WidgetTestCase<span class="token punctuation">(</span><span class="token string">&#39;test_default_widget_size&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    suite<span class="token punctuation">.</span>addTest<span class="token punctuation">(</span>WidgetTestCase<span class="token punctuation">(</span><span class="token string">&#39;test_widget_resize&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> suite

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    runner <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TextTestRunner<span class="token punctuation">(</span><span class="token punctuation">)</span>
    runner<span class="token punctuation">.</span>run<span class="token punctuation">(</span>suite<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>테스트 케이스와 테스트 묶음의 정의를 테스트하려는 코드와 같은 모듈(예를 들어 file:widget.py)에 넣을 수 있지만 테스트 코드를 분리된 모듈(예를 들어 <code>test_widget.py</code>)에 넣는 경우의 이점:</p></blockquote><ul><li>테스트 모듈이 명령행에서 독립적으로 작동할 수 있음</li><li>테스트 코드가 배포될 코드와 쉽게 분리될 수 있음</li><li>충분한 이유 없이 테스트하려는 코드에 맞춰서 테스트 코드를 바꾸려는 유혹이 덜 합니다.</li><li>테스트 코드가 테스트하려는 코드에 비해 훨씬 덜 빈번하게 수정되어야 합니다.</li><li>테스트하려는 코드는 더 쉽게 리팩토링할 수 있습니다.</li><li>C 언어로 작성된 모듈의 테스트 코드는 반드시 분리된 모듈에 위치해야 합니다, 따라서 일관성을 지키는 것이 어떨까요?</li><li>만약 테스트 전략이 바뀌더라도 소스 코드를 바꿀 필요가 없습니다.</li></ul></li></ul><h2 id="이전의-테스트-코드를-다시-사용" tabindex="-1"><a class="header-anchor" href="#이전의-테스트-코드를-다시-사용" aria-hidden="true">#</a> 이전의 테스트 코드를 다시 사용</h2><ul><li>이전의 모든 테스트 함수를 <code>TestCase</code> 서브 클래스로 변경하는 작업 없이 기존의 테스트 코드를 <code>unittest</code>로 실행하길 원하는 경우</li><li><code>TestCase</code>의 서브 클래스인 <code>FunctionTestCase</code> 클래스를 제공. 이는 기존 테스트 함수를 감싸는데 사용할 수 있고, 사전 설정과 정리 함수 또한 같이 사용할 수 있음</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">testSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    something <span class="token operator">=</span> makeSomething<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> something<span class="token punctuation">.</span>name <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span>
    <span class="token comment"># ...</span>
    
testcase <span class="token operator">=</span> unittest<span class="token punctuation">.</span>FunctionTestCase<span class="token punctuation">(</span>testSomething<span class="token punctuation">,</span>
                                     setUp<span class="token operator">=</span>makeSomethingDB<span class="token punctuation">,</span>
                                     tearDown<span class="token operator">=</span>deleteSomethingDB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">참고</p><ul><li><code>FunctionTestCase</code>를 사용하여 기존 테스트를 <code>unittest</code></li><li>기반 시스템으로 빠르게 변경할 수 있을지라도 이 방법을 추천하지는 않습니다.</li><li>시간을 들여서 적절한 <code>TestCase</code> 서브 클래스를 설정하는 것이 미래에 있을 테스트 리팩토링을 대단히 쉽게 만들어줄 것입니다.</li></ul></div>`,31);function b(g,_){const e=t("ExternalLinkIcon"),i=t("Badge");return l(),c("div",null,[d,s("p",null,[s("a",r,[n("참고> python 3.10.4 version"),a(e)])]),s("ul",null,[s("li",null,[k,s("a",v,[a(i,{type:"tip",text:"link",vertical:"middle"}),a(e)]),n(" 에서 영감을 받고 다른 언어의 주요 단위 테스트 프레임워크와 비슷한 특징을 가짐")]),m]),h])}const f=o(u,[["render",b],["__file","index.html.vue"]]);export{f as default};
