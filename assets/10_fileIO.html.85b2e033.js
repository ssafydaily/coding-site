import{_ as t,r as p,o,c as i,a as s,b as n,d as l,e as a}from"./app.2a81dd92.js";const c={},u=a(`<h1 id="file-input-output" tabindex="-1"><a class="header-anchor" href="#file-input-output" aria-hidden="true">#</a> File Input/Output</h1><h2 id="file-methods" tabindex="-1"><a class="header-anchor" href="#file-methods" aria-hidden="true">#</a> File Methods</h2><h3 id="open-text-file" tabindex="-1"><a class="header-anchor" href="#open-text-file" aria-hidden="true">#</a> open text file</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>file_object <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;파일경로(file_path)&#39;</span><span class="token punctuation">)</span>           <span class="token comment"># 읽기모드로 텍스트파일 열기</span>
file_object <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;파일경로(file_path)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;모드(mode)&#39;</span><span class="token punctuation">)</span>     <span class="token comment"># 지정한 모드로 열기</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">모드(mode)</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:center;"><code>&#39;r&#39;</code></td><td style="text-align:left;">텍스트 파일을 읽기 모드로 열기</td></tr><tr><td style="text-align:center;"><code>&#39;w&#39;</code></td><td style="text-align:left;">텍스트 파일을 쓰기 모드로 열기. 동일한 이름의 파일이 있으면 기존 내용은 사라진다.</td></tr><tr><td style="text-align:center;"><code>&#39;a&#39;</code></td><td style="text-align:left;">텍스트 파일을 추가 모드로 열기.</td></tr></tbody></table><h3 id="close-file" tabindex="-1"><a class="header-anchor" href="#close-file" aria-hidden="true">#</a> close file</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;input.txt&#39;</span><span class="token punctuation">)</span>           
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment"># 파일닫기</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="read-file" tabindex="-1"><a class="header-anchor" href="#read-file" aria-hidden="true">#</a> read file</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;파일경로(file_path)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">메서드</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:center;"><code>read(size)</code></td><td style="text-align:left;"><code>size</code>에 해당하는 파일의 내용을 읽어서 문자열로 반환. <code>size</code>가 생략되면 파일 끝까지 읽음.</td></tr><tr><td style="text-align:center;"><code>readline()</code></td><td style="text-align:left;">한줄을 읽어서 반환. 더 읽을 내용이 없으면 빈 문자열 반환.</td></tr><tr><td style="text-align:center;"><code>readlines()</code></td><td style="text-align:left;">문자열의 리스트를 반환.</td></tr></tbody></table><details class="custom-container details"><summary>examples</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;input.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
    contents <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> err<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;====================================================&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;input.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
    contents <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> err<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;====================================================&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;input.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
    lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> err<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="write-file" tabindex="-1"><a class="header-anchor" href="#write-file" aria-hidden="true">#</a> write file</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;파일경로(file_path)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;hello\\n&#39;</span><span class="token punctuation">)</span>      <span class="token comment"># 문자열을 쓰고, 문자열의 크기를 반환</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>examples</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;첫번째 문자열\\n&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;python input/ouput programming\\n&#39;</span><span class="token punctuation">]</span>
wf <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;output.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
wf<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
wf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

rf <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;output.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
rf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="read-line-by-line" tabindex="-1"><a class="header-anchor" href="#read-line-by-line" aria-hidden="true">#</a> read line-by-line</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;input.txt&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>line 단위로 파일 복사하기</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;input.txt&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rf<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;output.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> wf<span class="token punctuation">:</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> rf<span class="token punctuation">:</span>
        wf<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> Json</h2><h2 id="pathlib" tabindex="-1"><a class="header-anchor" href="#pathlib" aria-hidden="true">#</a> Pathlib</h2><h3 id="문자열로-파일경로를-처리할-경우" tabindex="-1"><a class="header-anchor" href="#문자열로-파일경로를-처리할-경우" aria-hidden="true">#</a> 문자열로 파일경로를 처리할 경우</h3><h2 id="directory" tabindex="-1"><a class="header-anchor" href="#directory" aria-hidden="true">#</a> Directory</h2><h2 id="with-문" tabindex="-1"><a class="header-anchor" href="#with-문" aria-hidden="true">#</a> with 문</h2>`,22),r=s("strong",null,"컨텍스트 관리자",-1),d={href:"https://docs.python.org/ko/3/reference/datamodel.html#context-managers",target:"_blank",rel:"noopener noreferrer"},k=s("li",null,[n("이것은 "),s("code",null,"try…except…finally"),n(" 사용 패턴을 캡슐화해서 재사용 가능하게 한다.")],-1),v=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> EXPRESSION <span class="token keyword">as</span> TARGET<span class="token punctuation">:</span>
    SUITE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>의미상 다음 코드와 동일하다.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>manager <span class="token operator">=</span> <span class="token punctuation">(</span>EXPRESSION<span class="token punctuation">)</span>
enter <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>manager<span class="token punctuation">)</span><span class="token punctuation">.</span>__enter__
exit <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>manager<span class="token punctuation">)</span><span class="token punctuation">.</span>__exit__
value <span class="token operator">=</span> enter<span class="token punctuation">(</span>manager<span class="token punctuation">)</span>
hit_except <span class="token operator">=</span> <span class="token boolean">False</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    TARGET <span class="token operator">=</span> value
    SUITE
<span class="token keyword">except</span><span class="token punctuation">:</span>
    hit_except <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> exit<span class="token punctuation">(</span>manager<span class="token punctuation">,</span> <span class="token operator">*</span>sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> hit_except<span class="token punctuation">:</span>
        exit<span class="token punctuation">(</span>manager<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">실행 과정</p><ol><li><p><strong>컨텍스트 관리자</strong>를 얻기 위해 <em>컨텍스트 expression</em> 이 평가된다.</p></li><li><p>나중에 사용하기 위해 컨텍스트 관리자의 <code>__enter__()</code> 가 로드된다.</p></li><li><p>나중에 사용하기 위해 컨텍스트 관리자의 <code>__exit__()</code> 가 로드된다.</p></li><li><p><strong>컨텍스트 관리자</strong>의 <code>__enter__()</code> 메서드를 호출.</p></li><li><p>with 문에 타깃이 포함되었으면, 그것에 <code>__enter__()</code> 의 반환 값을 대입한다.</p><ul><li>with 문은 <code>__enter__()</code> 메서드가 에러 없이 돌아왔을 때, <code>__exit__()</code> 가 항상 호출됨을 보장함.</li><li>타깃에 대입하는 동안 에러가 발생하면, <em>SUITE</em> 안에서 에러가 발생한 것과 같이 취급</li></ul></li><li><p>SUIT를 실행한다.</p></li><li><p>컨텍스트 관리자의 <code>__exit__()</code> 메서드를 호출한다. 예외가 발생하면 형(type), 값, traceback이 <code>__exit__()</code> 의 인자로 전달되고, 그렇지 않으면 세 개의 <code>None</code> 이 인자로 전달된다.</p></li></ol></div><ul><li>다음은 간단한 <em>파일 읽기</em> 예제이다.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;input.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>파일 객체를 다룰 때 with 키워드를 사용하는 것은 좋은 습관이다.</li><li>실행중에 예외가 발생하더라도 SUITE가 종료될 때 파일이 정상적으로 닫힌다.</li><li>동등한 <code>try-finally</code> 블록을 쓰는 것에 비교해 훨씬 간단하다.</li><li><code>with</code> 키워드를 사용하지 않으면, <code>f.close()</code> 를 호출해서 파일을 닫고 사용한 시스템 자원을 즉시 반납해야 한다.</li></ul><div class="custom-container danger"><p class="custom-container-title">주의</p><p><code>with</code> 키워드를 사용하거나 <code>f.close()</code>를 호출하지 않고 <code>f.write()</code>를 호출하면 프로그램이 정상적으로 종료되더라도 <code>f.write()</code>에 전달된 데이터가 디스크에 기록되지 않을 수 있다.</p></div><hr><h2 id="io-module" tabindex="-1"><a class="header-anchor" href="#io-module" aria-hidden="true">#</a> <code>io module</code></h2><ul><li><code>io</code> 모듈은 다양햔 유형의 <strong>I/O</strong> 를 처리 <ul><li>텍스트(Text), 바이너리(binary), 원시(raw)의 세가지 유형</li></ul></li><li><code>파일 객체(file Object)</code> 또는 <code>스트림 객체(stream object)</code>의 입출력 기능 활용</li></ul><h3 id="text-i-o" tabindex="-1"><a class="header-anchor" href="#text-i-o" aria-hidden="true">#</a> Text I/O</h3><ul><li>텍스트 스트림을 생성하는 가장 쉬운 방법ㅇ느 <code>open()</code> 을 사용하는 것으로, 선택적으로 인코딩을 지정</li><li>메모리 텍스트 스트림도 <code>StringIO</code> 객체로 제공</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;myfile.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span>
f <span class="token operator">=</span> io<span class="token punctuation">.</span>StringIO<span class="token punctuation">(</span><span class="token string">&quot;some initial text data&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="binary-i-o" tabindex="-1"><a class="header-anchor" href="#binary-i-o" aria-hidden="true">#</a> Binary I/O</h3><ul><li>바이너리 I/O는 버퍼링 된(buffered) I/O 라고도 하며, <code>bytes</code> 객체를 생성</li><li>바이너리 스트림은 <code>&#39;b&#39;</code>를 제공하여 <code>open()</code> 을 사용</li><li>인 메모리 바이너리 스트림도 <code>BytesIO</code> 객체로 제공</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;myfile.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span>
f <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token string">b&quot;some initial binary data: \\x00\\x01&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><strong>class io.BytesIO(inintial_bytes=b&#39;&#39;)</strong></p><ul><li>인 메모리 바이트 버퍼를 사용하는 바이너리 스트림 <code>BufferedIOBase</code> 상속</li><li><code>close()</code> 메서드가 호출되면 버퍼가 페기됨</li><li></li></ul><h3 id="raw-i-o" tabindex="-1"><a class="header-anchor" href="#raw-i-o" aria-hidden="true">#</a> Raw I/O</h3><ul><li>원시 I/O는 버퍼링을 비활성화 해서 바이너리 모드로 파일을 열어 생성</li><li><code>RawIOBase</code> 참고</li></ul></div>`,18);function h(m,b){const e=p("ExternalLinkIcon");return o(),i("div",null,[u,s("ul",null,[s("li",null,[n("with 문은 블록의 실행을 "),r,n(" ("),s("a",d,[n("with 문 컨텍스트 관리자"),l(e)]),n(") 가 정의한 메서드들로 감싸는 데 사용된다.")]),k]),v])}const y=t(c,[["render",h],["__file","10_fileIO.html.vue"]]);export{y as default};
