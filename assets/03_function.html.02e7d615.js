import{_ as n,o as s,c as a,e as p}from"./app.2a81dd92.js";const t={},e=p(`<h1 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> Function</h1><ul><li><p>함수를 사용해야 하는 이유?</p></li><li><p>함수 정의 방법</p><ul><li>def</li><li>함수이름</li><li>함수의 매개변수(parameter)와 인자(argument)</li><li>함수의 body <ul><li>docstring</li><li>code</li></ul></li></ul></li><li><p>함수는 항상 하나의 객체를 return 한다.</p><ul><li>값이 2개 이상이면 튜플로 반환한다.</li><li>명시적으로 return이 없다면 python이 None 을 반환해준다.</li></ul></li><li><p>함수의 입력값</p><ul><li>위치 인자</li><li>기본 인자</li><li>가변 인자</li><li>키워드 인자</li><li>키워드 가변 인자</li></ul></li></ul><blockquote><p>주의 사항</p><ul><li>기본 인자 다음에 위치 인자 사용할 수 없다.</li><li></li></ul></blockquote><h3 id="argument-vs-parameter" tabindex="-1"><a class="header-anchor" href="#argument-vs-parameter" aria-hidden="true">#</a> Argument vs. Parameter</h3><h4 id="return-value" tabindex="-1"><a class="header-anchor" href="#return-value" aria-hidden="true">#</a> return value</h4><h4 id="positional-argument-위치-인자" tabindex="-1"><a class="header-anchor" href="#positional-argument-위치-인자" aria-hidden="true">#</a> Positional argument 위치 인자</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">)</span>

func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
func<span class="token punctuation">(</span>arg2<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> arg3<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> arg1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="기본-인자" tabindex="-1"><a class="header-anchor" href="#기본-인자" aria-hidden="true">#</a> 기본 인자</h4><ul><li><strong>arg_name=default_value</strong></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token operator">=</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> arg3<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">)</span>

<span class="token comment"># func()</span>
func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
func<span class="token punctuation">(</span>arg2<span class="token operator">=</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> arg3<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> arg1<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment"># func(arg1=&#39;name&#39;, arg2=True, 10)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="가변-인자" tabindex="-1"><a class="header-anchor" href="#가변-인자" aria-hidden="true">#</a> 가변 인자</h4><ul><li><strong><code>*arg</code></strong> -&gt; 인자들이 튜플로 패킹된다.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>

func<span class="token punctuation">(</span><span class="token punctuation">)</span>
func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
func<span class="token punctuation">(</span>arg2<span class="token operator">=</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> arg3<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> arg1<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>위치 인자나 키워드 인자들과 같이 사용하는 경우 주의 사항</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> <span class="token operator">*</span>second<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span>

func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token comment">#=====================================</span>
<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">*</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span>

func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> second<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="키워드-가변-인자" tabindex="-1"><a class="header-anchor" href="#키워드-가변-인자" aria-hidden="true">#</a> 키워드 가변 인자</h4><ul><li><strong><code>**kwarg</code></strong> --&gt; <code>dict</code> 로 패킹된다.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">**</span>kwarg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>kwarg<span class="token punctuation">)</span>

func<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">&#39;three&#39;</span><span class="token punctuation">)</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>마찬가지로, 위치인자와 같이 사용하는 경우 주의</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token operator">**</span>kwarg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>kwarg<span class="token punctuation">)</span>

func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;james&#39;</span><span class="token punctuation">)</span> 

<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">**</span>kwarg<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>kwarg<span class="token punctuation">)</span>

func<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> arg<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># syntax error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="함수-스코프" tabindex="-1"><a class="header-anchor" href="#함수-스코프" aria-hidden="true">#</a> 함수 스코프</h2>`,21),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","03_function.html.vue"]]);export{r as default};
