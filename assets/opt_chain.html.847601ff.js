import{_ as n,o as s,c as a,e}from"./app.2a81dd92.js";const o={},l=e(`<h1 id="question-mark" tabindex="-1"><a class="header-anchor" href="#question-mark" aria-hidden="true">#</a> Question Mark</h1><blockquote><ul><li><strong>ES2020</strong> 에서 새롭게 추가됨</li><li>참고 https://www.freecodecamp.org/news/how-the-question-mark-works-in-javascript/</li></ul></blockquote><ul><li><strong><code>?</code></strong> 의 사용 <ol><li>Ternary Operator</li><li>Optional Chaining</li><li>Nullish Coalescing</li></ol></li></ul><h3 id="optional-chaining" tabindex="-1"><a class="header-anchor" href="#optional-chaining" aria-hidden="true">#</a> Optional Chaining</h3><ul><li><code>?.</code> 연산자는 <code>.</code> 체이닝 연산자와 유사하게 작동하지만, 만약 참조가 <code>nullish</code> (<code>null</code> 또는 <code>undefined</code>)면, <code>undefined</code> 를 반환</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;jong&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
user<span class="token punctuation">.</span>abc<span class="token punctuation">.</span>address       <span class="token comment">// TypeError </span>
suer<span class="token punctuation">.</span>abc<span class="token operator">?.</span>address      <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="nullish-coalescing" tabindex="-1"><a class="header-anchor" href="#nullish-coalescing" aria-hidden="true">#</a> Nullish Coalescing</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">undefined</span> <span class="token operator">||</span> <span class="token string">&#39;N/A&#39;</span>
<span class="token number">0</span> <span class="token operator">||</span> <span class="token number">1000</span>           
<span class="token string">&#39;&#39;</span> <span class="token operator">||</span> <span class="token number">1000</span>

<span class="token comment">// false 일 경우 0을 기본값을 설정하고 싶을 때</span>
<span class="token keyword">undefined</span> <span class="token operator">??</span> <span class="token string">&#39;ac&#39;</span>
<span class="token keyword">null</span> <span class="token operator">??</span> <span class="token number">1000</span>
<span class="token number">0</span> <span class="token operator">??</span> <span class="token number">1000</span>
<span class="token string">&#39;&#39;</span> <span class="token operator">??</span> <span class="token string">&#39;N/A&#39;</span>
undefine <span class="token operator">??</span> <span class="token string">&#39;N/A&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>왼쪽 값이<code>undefined</code> 와 <code>null</code> 일때, 오른쪽 값을 선택. 논리 OR (<code>||</code>) 와 동일하게 동작</li><li>빈문자열(<code>&#39;&#39;</code>) 과 <code>0</code> 일 때는 왼쪽 값을 취한다.</li></ul>`,9),i=[l];function c(t,r){return s(),a("div",null,i)}const d=n(o,[["render",c],["__file","opt_chain.html.vue"]]);export{d as default};
