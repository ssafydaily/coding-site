import{_ as n,o as a,c as s,e}from"./app.2a81dd92.js";const t={},i=e(`<h1 id="request-response" tabindex="-1"><a class="header-anchor" href="#request-response" aria-hidden="true">#</a> Request &amp; Response</h1><hr><h1 id="response" tabindex="-1"><a class="header-anchor" href="#response" aria-hidden="true">#</a> Response</h1><h2 id="이미지-파일-응답-객체에-포함시키기" tabindex="-1"><a class="header-anchor" href="#이미지-파일-응답-객체에-포함시키기" aria-hidden="true">#</a> 이미지 파일 응답 객체에 포함시키기</h2><ul><li><code>rb</code> =&gt; <code>read binary</code></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> base64

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>image_path<span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> image_file<span class="token punctuation">:</span>
    image_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>image_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>

context <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;image&#39;</span><span class="token punctuation">:</span> image_data<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>장고 템플릿 파일의 <code>&lt;img&gt;</code> 태그에서 다음과 같이 처리</li></ul><div class="language-django line-numbers-mode" data-ext="django"><pre class="language-django"><code>&lt;img src=&quot;data:image/png;base64,<span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">image</span> <span class="token delimiter punctuation">}}</span></span>&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),o=[i];function p(c,l){return a(),s("div",null,o)}const d=n(t,[["render",p],["__file","request_response.html.vue"]]);export{d as default};
